
Code for loading data:

import csv
from google.cloud import bigtable
from google.cloud.bigtable import row


client = bigtable.Client(admin=True)
instance = client.instance('ev-bigtable')
table = instance.table('ev-population')

with open('Electric_Vehicle_Population_Data.csv') as file:
    reader = csv.DictReader(file)
    for row_data in reader:
        row_key = row_data['DOL Vehicle ID'].encode()
        row = table.row(row_key)

        row.set_cell('ev_info', 'make', row_data['Make'].encode())
        row.set_cell('ev_info', 'model', row_data['Model'].encode())
        row.set_cell('ev_info', 'model year', row_data['Model Year'].encode())
        row.set_cell('ev_info', 'electric range', row_data['Electric Range'].encode())


        row.set_cell('ev_info', 'city', row_data['City'].encode())
        row.set_cell('ev_info', 'county', row_data['County'].encode())
        row.commit()




Code for flask server: 

from flask import Flask
from google.cloud import bigtable

app = Flask(__name__)


@app.route('/rows', methods=['GET'])
def row_count():
    client = bigtable.Client(admin=True)
    instance = client.instance('ev-bigtable')
    table = instance.table('ev-population')
    rows = table.read_rows()
    count = sum(1 for _ in rows)
    return str(count)

@app.route('/Best-BMW', methods=['GET'])
def best_bmws():
    client = bigtable.Client(admin=True)
    instance = client.instance('ev-bigtable')
    table = instance.table('ev-population')
    rows = table.read_rows()
    rows.consume_all()
    count = 0

    count = sum(
     1 for row in rows.rows.values()
     if ( row.cells['ev_info'][b'electric range'][0].value and
         int(row.cells['ev_info'][b'electric range'][0].value) > 100 and
         row.cells['ev_info'][b'make'][0].value.decode() == 'BMW'
     )
    )
    return str(count)

@app.route('/tesla-owners', methods=['GET'])
def tesla_owner_count():
    client = bigtable.Client(admin=True)
    instance = client.instance('ev-bigtable')
    table = instance.table('ev-population')
    rows = table.read_rows()
    rows.consume_all()
    count = sum(1 for row in rows.rows.values() 
                if (row.cells['ev_info'][b'city'][0].value.decode() == 'Seattle' 
                    and row.cells['ev_info'][b'make'][0].value.decode() == 'TESLA'))
    return str(count)



@app.route('/delete', methods=['GET'])
def delete_records():
    client = bigtable.Client(admin=True)
    instance = client.instance('ev-bigtable')
    table = instance.table('ev-population')
    rows = table.read_rows()
    rows.consume_all()
    count = 0
    mutations = []
    for row_key, row in rows.rows.items():
        if int(row.cells['ev_info'][b'model year'][0].value) < 2014:


            row_to_delete = table.row(row_key)
            row_to_delete.delete()
            mutations.append(row_to_delete)
        else:
            count += 1

    table.mutate_rows(mutations)
    return str(count)


@app.route('/update', methods=['GET'])
def update_range():
    client = bigtable.Client(admin=True)
    instance = client.instance('ev-bigtable')
    table = instance.table('ev-population')
    row_key = '257246118'.encode()
    row = table.row(row_key)
    row.set_cell('ev_info', b'electric range', '200'.encode())
    row.commit()
    return "Success"



if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)